** How to build an image
   #+BEGIN_SRC shell
   docker build -t _image_name_ .
   #+END_SRC
** How to run an image
   #+BEGIN_SRC shell
   docker run _image_name_

   #+END_SRC
** How to remove docker image
   #+BEGIN_SRC shell
   docker rmi image_name
   #+END_SRC
** How to remove docker container
   #+BEGIN_SRC shell
   docker rm container_name
   #+END_SRC
** How to list all container/process of docker
   #+BEGIN_SRC shell
   docker ps;  -> List running process
   docker ps -a -> List all process
   #+END_SRC
** How to access to command line env of docker container
   #+BEGIN_SRC shell
   docker exec -it _container_name_ /bin/bash
   #+END_SRC
** How to build image faster.
   run --rm -it fedora:25 /bin/bash
   RUN all need command here, to understand workflow
** How to access to console of running application.
   docker attach /container_name/
** How to push image to docker hub
   #+BEGIN_SRC shell
   docker login;
   docker tag fedora-elixir:1.4.0 nguyenvinhlinh/fedora-elixir:1.4.0
   docker push nguyenvinhlinh/fedora-elixir:1.4.0
   #+END_SRC

** What is the advantages and disadvantages of making base image (Dockerfile-base) along with Dockerfile for applications
*** Advantages
1. To avoid a case that the library change/remove/modify its source code but keep the same version. If that happend,
there's always a snapshoot of built dependencies which are good and ready to deploy.
2. If develop application within docker environment, developers dont have to do set up developing environment (the environment/app dependencies has been built from base image). Remember that, the base image gonna used in prod and env. Via sharing volumes, developers can developer application well
*** Disadvantages
1. When code changes, there might need to run two build process consequently, One to build the base image(dependencies),
Two to build the main image. If the dependencies requirement changes, but deployers forget to upgrade base image, Of
 course, they cannot deploy and run application successfully.

** How to start docker daemon on centos
   #+BEGIN_SRC shell
   sudo systemctl start docker
   #+END_SRC
** How to keep docker image running in docker-compose for debug?
   In the entry section, change `command` or `entry` to:
   #+BEGIN_SRC text
   tail -f /dev/null
   #+END_SRC
** How to beautify volume entry config in docker-compose?
#+BEGIN_SRC text
version: "3.7"
services:
  report-analyst-database:
    image: postgres:11.4
    ports:
      - 9040:5432
    volumes:
      - REPORT_ANALYST_DATABASE_VOLUME:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=risklab-ra-local
      - POSTGRES_USER=ttek
      - POSTGRES_PASSWORD=ttek123

volumes:
  REPORT_ANALYST_DATABASE_VOLUME:
    driver: local
    driver_opts:
        type: none
        o: bind
        device: D:\docker_volumes\report_analyst_database_volume
#+END_SRC

** How to run a docker image overrided entrypoint
#+BEGIN_SRC sh
docker run -it --entrypoint /bin/bash [docker_image]
#+END_SRC

** How to fix docker, iptable error?
example log:

#+BEGIN_SRC text
$ docker-compose restart
[+] Running 1/1
â ¼ Container traefik Restarting 11.5s Error response from daemon: Cannot restart container 908f25f3f53926d138145c2ed993f986eb8ae15cba636bd709748ba02a4fd12b:
  driver failed programming external connectivity on endpoint traefik (5952f70650c5f8da4f6951661f65c1abdb9a2372b33f1a5c424b5680f00e2180):
  (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 8080 -j DNAT --to-destination 172.18.0.3:8080 ! -i br-3f0534595f4b:
  iptables: No chain/target/match by that name. (exit status 1))
#+END_SRC

to solve this problem, just execute the following commands:
#+BEGIN_SRC sh
# Clear all chains
$ sudo iptables -t filter -F
$ sudo iptables -t filter -X

# Restart Docker Service
systemctl restart docker
#+END_SRC

** How to build docker image and get file from it.
Step 1: Prepare dockerfile, this is just an example.

#+BEGIN_SRC text
from ruby:3.2.0 as build

WORKDIR /opt/nguyenvinhlinh.github.io
COPY . /opt/nguyenvinhlinh.github.io

RUN bundle config set --local deployment true
RUN bundle install
RUN bundle exec jekyll build --destination=/opt/nguyenvinhlinh.github.io/dist     <----

FROM scratch as release                                                           <----
COPY --from=build  /opt/nguyenvinhlinh.github.io/dist /                           <----
#+END_SRC

Step 2: Execute ~docker build~ command, it will copy the whole directory of stage named `release`.
#+BEGIN_SRC shell
$ docker build -f Dockerfile --target=release --output type=local,dest=DESTINATION_PATH_ON_HOST_MACHINE .
#+END_SRC
Now, check out the ~DESTINATION_PATH_ON_HOST_MACHINE~ path on the host machine.
