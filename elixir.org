** How to debug in Elixir
   #+BEGIN_SRC elixir
   require IEx
   IEx.pry #> to point need to be inspect
   respawn #> to continue
   #+END_SRC

** Difference between .exs and .ex
   - exs: script file
   - ex: compile file
** Require, Import, Use
- _Require_: Use when the module got macro function,
#+BEGIN_SRC elixir
require Integer
Integer.is_even(1)
#+END_SRC
- _Import_: Import function/macro from module to current module. _Importing_ will
require a module automatically, as a consequence, you can have run any function of imported __MODULE__.

#+BEGIN_SRC elixir
import Integer, only: [is_even: 1]
is_even(2)
Integer.is_odd(2)
#+END_SRC
- _Use_: _Use_ requires a module, then run a callback function of the module.
#+BEGIN_SRC Elixir
defmodule A do
  use Feature, option: :value
end
# It's then equal to
defmodule A do
  require Feature
  Feature.__using__(option: :value)
end
#+END_SRC

** How to apply plug for particular function
   #+BEGIN_SRC elixir
   plug :check_product_owner when action in [:create, :delete]
   #+END_SRC

** How to run particular test
- Assign a tag `@tag mustexec: true` right above the test.
#+BEGIN_SRC elixir
  @tag mustexec: true
  test "true" do
    assert(true)
  end
#+END_SRC
- Execute mix test with `--only` flag.
#+BEGIN_SRC sh
mix test --only mustexec
#+END_SRC


** TODO
- research on process, note them all down
- research on How elixir save STATE



** What is agent ?
First of all, Agent is a name of module. By using Agent, you can make a
separated process which store state. The state can be share among another process.

** What is the order of start_link and init in GenServer.
   start_link/3 comes first then init/1. The second argument of start_link/3 will be then passed to init/1.

** How to get string of a Process

#+BEGIN_SRC elixir
  {:ok, pid} = GenServer.start_link(__MODULE__, nil, name: __MODULE__)
  pid_string = pid
  |> :erlang.pid_to_list()
  |> to_string()
#+END_SRC
