** How to add an uploading/static directory
*** Assign the path of new static directory
    This is a new configured line added in the *config/dev.exs*
    #+BEGIN_SRC elixir
    config :iea, :upload_dir, "/opt/iea/upload"
    #+END_SRC
*** Config endpoint to load static resource from new directory
    This is a new configured line added in the *source/lib/enpoint.ex*
    #+BEGIN_SRC elixir
    plug Plug.Static,
         at: "/upload", from: Application.get_env(:iea, :upload_dir)
    #+END_SRC
** How to config webpack instead of brunch
   http://www.phoenixframework.org/docs/static-assets#section-phoenix-without-brunch
   https://github.com/nguyenvinhlinh/ChatApp_Phoenix_React_Webpack/blob/master/webpack.config.js

** How to deploy phoenix app simple way
*** Make prod.exs
*** Make prod.secret.exs
*** Install npm
*** Build assets with bruch `./node/.bin/brunch build --production
*** compile in prod mode `MIX_ENV=prod mix compile`
*** Digest asset file: `mix phoenix.digest`
*** Run the server `MIX_ENV=prod PORT=4000 mix phoenix.server` (1)
*** Run the server (console)  `MIX_ENV=prod PORT=4000 iex -S mix phoenix.server` (2)
*** Run the server (detached)  `MIX_ENV=prod PORT=4000 elixir --detached  -S mix do compile, phoenix.server` (3)
** How to deploy phoenix app the hard way
*** NOTES
- For _ANY_ commands, It's need to have  /MIX_ENV=prod/
- It's important to make sure that the dependencies lastest and compile
- Change version in /mix.exs/ to mark as a new release
*** How to make release
1. Add EXRM to mix.exs https://github.com/bitwalker/exrm
#+BEGIN_SRC elixir
defp deps do
    [{:exrm, "~> x.x.x"}]
end
#+END_SRC
2. Fetch lib, compile, do digest
#+BEGIN_SRC shell
MIX_ENV=prod mix do deps.get, compile
MIX_ENV=prod mix phoenix.digest
#+END_SRC
3. Generate release
#+BEGIN_SRC shell
MIX_ENV=prod mix release
#+END_SRC
*** How to deploy
#+BEGIN_SRC shell
bash rel/app_name/bin/app_name start/stop
#+END_SRC
*** How to do hot upgrade while running
#+BEGIN_SRC shell
bash rel/app_name/bin/app_name upgrade app_version
#+END_SRC
** How to do i18n with gettext
*** Extract all i18n message, generate po template file
#+BEGIN_SRC shell
mix gettext.extract
#+END_SRC
*** Generate locale folder with language label
#+BEGIN_SRC shell
mix gettext.merge /priv/gettext --locale vn
#+END_SRC
*** How to update .po file when update .po template file
#+BEGIN_SRC shell
mix gettext.merge priv/gettext
#+END_SRC

** Notes of EXRM, while hot upgrade/downgrade app
*** Developers must do hot upgrade/downgrade step by step
   (1.0) -> (2.0) -> (3.0)  :OK
   (1.0) -> (3.0)           :ERROR
   (3.0) -> (2.0) -> (1.0)  :OK
   (3.0) -> (1.0)           :ERROR
*** Re-release issue
    (1.0) -> (2.0)
** How to do composable query in ecto
   #+BEGIN_SRC elixir
   query1 = from p in Post
   query2 = from p in query1, where: p.published == true
   query3 = from p in query2, where: ilike(p.name, "%a%")
   Repo.all(query3)
   #+END_SRC
** How do phoenix render layout and template
   souce: https://github.com/phoenixframework/phoenix/blob/v1.2.3/lib/phoenix/view.ex#L170
   Controller trigger _render_ function (Controller.render), passes (conn, ViewModule, ViewTemplate, assigns).
   -> Find a view, then trigger _render_ function of view(View.render) (exist params: ViewModule, ViewTemplate, assigns)
   -> Detach :layout from _assigns_, got: LayoutViewModule, LayoutTempalte, ViewModule, ViewTemplate, assigns
   -> Render LayoutModule, LayoutTemplate with assigns of InnerViewModule, InnerViewTemplate, and assigns, fn look alike: (LayoutModule.render(LayoutTemplate, assigns))
   -> LayoutModule.render/2 is imported via _use_ from the Phoenix.Template.
** What is the usecase of setting _namespace_ or _path_  in the phoenix view
   The main purpose of setting _namespace_ and _path_ is to correct the template path where Templating Engine can find template files.
   While import phoenix view, the default _root_ is /web/templates/'. Beside that, there are available options such as: _path_ and _namespace_.
   _path_: refers to a directory group name which store templates for example: 'user', 'admin/teacher'
   _namespace_: refer to base module name, For example: 'MyApp.Admin.User', namespace can be 'MyApp' or 'MyApp.Admin'.
   The consequence of setting namespace to 'MyApp' is the path suppose to be '/root/admin/user/'
   The consequence of setting namespace to 'MyApp.Admin' is the path suppose to be '/root/user/'
   The main use case to set _namespace_ instead of _path_ is set the file path automatically based on module names, and advoid writing this
   kind of code trunk repeatedly.
   #+BEGIN_SRC elixir
   defmodule MyApp.Admin.UserView do
     use Phoenix.Template, root: "/web/template", path: "admin/user"  -> duplicated `path` indicator
   end

   defmodule MyApp.Admin.TeacherView do
     use Phoenix.Template, root: "/web/template", path: "admin/teacher"
   end
   #+END_SRC
   A better practice is to separate the code trunk
   #+BEGIN_SRC language
   defmodule MyApp.Admin.View do
     use Phoenix.View, root: "web/templates"   --> Note that by default, the namespace set to be the first module of MyApp.Admin.View which is MyApp
   end

   defmodule MyApp.Admin.UserView do
     use MyApp.Admin.View
   end

   defmodule MyApp.Admin.TeacherView do
    use MyApp.Admin.View
   end
   #+END_SRC
