** Install python's dependency requirement on fedora?
#+BEGIN_SRC sh
dnf install -y  bzip2-devel ncurses-devel libffi-devel \
    readline-devel openssl-devel sqlite sqlite-devel \
    tk tk-devel
#+END_SRC

** Isolate environment for python
*** Install virtualenv
#+BEGIN_SRC shell
pip install virtualenv
#+END_SRC
*** Create new environment
#+BEGIN_SRC python
virtualenv env_name
#+END_SRC
*** How to activate the environment
#+BEGIN_SRC shell
- change directory to the bin/activate
- source activate
#+END_SRC
*** How to deactivate the environment
#+BEGIN_SRC shell
deactivate
#+END_SRC
** How to list installed packages (not for requirements.txt)
#+BEGIN_SRC shell
pip list
#+END_SRC
** How to list installed packages (for requirements.txt)
#+BEGIN_SRC shell
pip freeze > requirements.txt
#+END_SRC
** How to install package from requirements.txt

#+BEGIN_SRC shell
pip install -r requirements.txt
#+END_SRC

** Separate module / use blueprint with Flask?
#+BEGIN_SRC python
# app.py
from blueprint_module import blueprint

app = Flask(__name__)
app.register_blueprint(blueprint)
#+END_SRC

#+BEGIN_SRC python

# blueprint_module\__init__.py
from flask import Blueprint
blueprint = Blueprint('my_blueprint', __name__)
from . import page
#+END_SRC

#+BEGIN_SRC python
# blueprint_module\page.py
from . import blueprint

@blueprint.route("/url", methods=['GET'])
def hello():
  return 'hello world'
#+END_SRC

** How to speed up `pip install` with pre-build wheels?
*** Pip
#+BEGIN_SRC shell
$ pip install --extra-index-url https://alpine-wheels.github.io/index pandas
#+END_SRC
*** Pip with a requirements file
#+BEGIN_SRC text
# contents of requirements.txt

--extra-index-url https://alpine-wheels.github.io/index

pandas
#+END_SRC

** How to find python package which does not have `wheels`?
#+BEGIN_SRC sh
pip install --force-reinstall -r requirements.txt --only-binary=:all:
#+END_SRC

** How to find python package which does not have `wheels` faster?
#+BEGIN_SRC sh
mkdir -p downloads
pip download -r ./requirements.txt  --dest downloads
ls downloads/*.tar.gz
#+END_SRC

** Where does python install on window?
#+BEGIN_SRC text
C:\Users\nguye\AppData\Local\Programs\Python\Python39
#+END_SRC

** How to fix pipenv error while installing `pip install pipenv`
Reason: conflict with `virtualenv`
- Step 1: remove `virtualenv`:
#+BEGIN_SRC sh
pip uninstall virtualenv
#+END_SRC

- Step 2: remove `pipenv`:
#+BEGIN_SRC sh
pip uninstall pipenv
#+END_SRC

- Step 3: install `pipenv` again
#+BEGIN_SRC sh
pip install pipenv
#+END_SRC

** When to use `with` in python?
First of all, `with` is used to handle exception in python. In addition, it makes code looks cleaner and more readable.
This is example of handling exception:
- Without using `with`
#+BEGIN_SRC python
file = open('file_path', 'w')
try:
    file.write('hello world')
finally:
    file.close()
#+END_SRC
- With using `with`
#+BEGIN_SRC python
with open('file_path', 'w') as file:
    file.write('hello world !')
#+END_SRC

** How to store pipenv's environment in different directory?
Set environment variables named `WORKON_HOME`
#+BEGIN_SRC sh
export WORKON_HOME=/mnt/d/.virtualenvs
#+END_SRC

** Snippet for calculating time interval
#+BEGIN_SRC python
import time

start_time = time.time()
end_time = time.time()
interval  = end_time - start_time
print(f"Finished after {interval:.2f}")
#+END_SRC

** Python f-string format datetime
#+BEGIN_SRC python
import datetime

now = datetime.datetime.now()

print(f'{now:%Y-%m-%d %H:%M}')
#+END_SRC

** Python f-string format floats
#+BEGIN_SRC python
val = 12.3

print(f'{val:.2f}')
print(f'{val:.5f}')
#+END_SRC
